
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    mf_struct = {}
    rows = cur.fetchall()

    #pass 0
    
    for row in rows:
        key = tuple([row['state'], row['date'], row['prod'], row['quant'], row['cust']])
        if key not in mf_struct:
            mf_struct[key] = {
            'state': row['state'], 'date': row['date'], 'prod': row['prod'], 'quant': row['quant'], 'cust': row['cust'],
    
            '1_min_quant': 0, '1_max_quant': 0
        }
        
    #Pass 1: Sigma is (True)
    for row in rows:
        if True:
            key = tuple([row["state"], row["date"], row["prod"], row["quant"], row["cust"]])
            if mf_struct[key]['1_min_quant'] == 0 or row['quant'] < mf_struct[key]['1_min_quant']:
                mf_struct[key]['1_min_quant'] = row['quant']
            mf_struct[key]['1_max_quant'] = max(mf_struct[key]['1_max_quant'], row['quant'])

#Compute Averages 

    _global = []
    for row in mf_struct.values():
        print(row)
        if row["quant"] == row["1_min_quant"] or row["quant"] == row["1_max_quant"]:
            output = {}
            for col in ['cust', 'quant', 'prod', 'date', 'state', '1_min_quant', '1_max_quant']:
                if col in row:
                    output[col] = row[col]
                else:
                    output[col] = eval(col, None, {"row": row})
            _global.append(output)
        
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    