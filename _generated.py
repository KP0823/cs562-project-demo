
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
<<<<<<< Updated upstream
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    
=======
    import re
    #function needed to wrap aggregate equations
    def simplify_aggr(str):
        tokens = re.split(r'(\W)', str)
        outputArr = []
        for token in tokens:
            token = token.strip()
            if not token:
                continue
            if re.match(r'^\d+_(sum|avg|max|min|count)_\w+$', token):
                outputArr.append(f"row['{token}']")
            else:
                outputArr.append(token)
        return ' '.join(outputArr)

    mf_struct = {}
    rows = cur.fetchall()

    #pass 0
    
    for row in rows:
        key = tuple([row['month'], row['prod']])
        if key not in mf_struct:
            mf_struct[key] = {
            'month': row['month'], 'prod': row['prod'],
    
            '1_sum_quant': 0, '2_sum_quant': 0
        }
        
    #Pass 1: Sigma is (True)
    for row in rows:
        if True:
            key = tuple([row["month"], row["prod"]])
            mf_struct[key]['1_sum_quant'] += row['quant']

    #Pass 2: Sigma is (year==2020)
    for row in rows:
        if row["year"]==2020:
            key = tuple([row["month"], row["prod"]])
            mf_struct[key]['2_sum_quant'] += row['quant']

#Compute Averages 

    _global = []
    for row in mf_struct.values():
        if row["2_sum_quant"] > 10000 and row["1_sum_quant"] > 40000:
            output = {}
            for col in ['prod', 'month', '1_sum_quant', '2_sum_quant', '1_sum_quant + 2_sum_quant', '1_sum_quant / 2_sum_quant']:
                if col in row:
                    output[col] = row[col]
                else:
                    output[col] = eval(simplify_aggr(col), None, {"row": row})
            _global.append(output)
        
>>>>>>> Stashed changes
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    